# 워크플로우의 이름
name: Create Hello File Manually

# 이 워크플로우의 실행 조건
on:
  # 'workflow_dispatch'를 통해 GitHub Actions 탭에서 수동으로 실행할 수 있습니다.
  workflow_dispatch:

# 실행될 작업 정의
jobs:
  # 작업의 ID
  create-file-job:
    # 이 작업이 실행될 가상 머신 환경
    runs-on: ubuntu-latest

    # 작업에 필요한 권한 설정 (파일을 쓰고 커밋하려면 contents: write가 필수)
    permissions:
      contents: write

    # 실제 실행될 단계들
    steps:
      # 1. 저장소 코드 체크아웃
      #    파일을 커밋하려면 먼저 저장소의 최신 상태를 가져와야 합니다.
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. 'hello.txt' 파일 생성
      #    'echo' 명령어와 리디렉션(>)을 사용하여 파일에 내용을 씁니다.
      - name: Create hello.txt file
        run: echo "안녕" > hello.txt

      # 3. 변경사항 커밋 및 푸시
      #    생성된 파일을 저장소에 영구적으로 반영합니다.
      - name: Commit and push changes
        run: |
          # Git에 커밋할 사용자 이름과 이메일을 설정합니다.
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 새로 생성된 'hello.txt' 파일을 Git 스테이징 영역에 추가합니다.
          git add hello.txt
          
          # 변경사항이 있을 경우에만 커밋을 진행합니다. (파일이 이미 존재하는 경우 등 대비)
          # 'git diff --staged --quiet'는 스테이징된 변경사항이 없으면 0을 반환합니다.
          if ! git diff --staged --quiet; then
            # 커밋 메시지를 작성하고 커밋합니다.
            git commit -m "Docs: Add hello.txt file via Actions"
            
            # 변경사항을 원격 저장소(GitHub)로 푸시합니다.
            git push
          else
            # 변경사항이 없을 경우 로그를 남깁니다.
            echo "No changes to commit."
          fi